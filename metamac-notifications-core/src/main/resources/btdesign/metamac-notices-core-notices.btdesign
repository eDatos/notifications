import "classpath:/btdesign/metamac-notices-core-common.btdesign"

Application Notices { 
	basePackage=unused

	Module enume_notice {
		basePackage=org.siemac.metamac.notices.core.notice.enume
		
		enum NoticeType {
    		NOTIFICATION,
    		ANNOUNCEMENT
    	}
    	
    	enum NoticesRoleEnum {
    		ADMINISTRADOR,
    		ANY_ROLE_ALLOWED
    	}
	}
	
	Module domain_notice {
		basePackage=org.siemac.metamac.notices.core.notice

		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------
		
		Service NoticesService {
			> @NoticeRepository
			> @ReceiverRepository
			
			// Notices
			@Notice findNoticeById(Long id) throws MetamacException;
			@Notice retrieveNoticeByUrn(String urn) throws MetamacException;
			@Notice createNotice(@Notice notice) throws MetamacException;
    		@Notice updateNotice(@Notice notice) throws MetamacException;
    		deleteNotice(Long id) throws MetamacException;
    		List<@Notice> findAllNotice throws MetamacException;
    		List<@Notice> findNoticeByCondition(List<ConditionalCriteria> condition) throws MetamacException;
    		List<@Notice> findUserNotices(String receiverUsername) throws MetamacException;
			
		}  

		// ----------------------------------------------------------------
		// 							ENTITIES
		// ---------------------------------------------------------------- 

		Entity Notice {
			databaseTable="TB_NOTICES"
			hint="idSequence=NOTICES"
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			"Universal resource name, this is for use in registries: all registered objects have a urn"
			String urn nullable;
			
			"Sending application ID"
			String sendingApplication required;
			"Sending user"
			String sendingUser nullable;
       		"Expiration date. Only valid when noticeType is ANNOUNCEMENT"
			DateTimeTZ expirationDate nullable; 
       		"Type of notice"
       		- @NoticeType noticeType required;
			
			"Subject"
			String subject required length="4000";
			"Messages"
			- Bag<@Message> messages cascade="all-delete-orphan" fetch="lazy" inverse <-> notice;
       		"Required roles access for notice"
       		- Bag<@Role> roles cascade="all-delete-orphan" fetch="lazy" inverse <-> notice;
       		"Receivers"
			- Bag<@Receiver> receivers not nullable cascade="all-delete-orphan" fetch="lazy" inverse <-> notice;
			"Applications"
			- Bag<@App> apps cascade="all-delete-orphan" fetch="lazy" inverse <-> notice;
       		"Required statistical operations access for notice"
			- Bag<@StatisticalOperation> statisticalOperations cascade="all-delete-orphan" fetch="lazy" inverse <-> notice;
			
			Repository NoticeRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
				@Notice retrieveByUrn(String urn) throws MetamacException;
				List<@Notice> findByReceiverUsername(String receiverUsername) throws MetamacException;
			}
		}

		Entity Message {
			databaseTable="TB_MESSAGES"
			hint="idSequence=MESSAGES"
			not auditable
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			
			"Text"       		
			Clob text required;
			
			"Resources"
			- Bag<@ExternalItem> resources databaseColumn="RESOURCE_FK" databaseJoinColumn="MESSAGE_FK" databaseJoinTable="TB_MESSAGE_RESOURCES" cascade="all-delete-orphan";

			"Notice"
			- @Notice notice not nullable cascade="none" databaseColumn="MESSAGE_FK" <-> messages;
			
			Repository MessageRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
			}
		}

		
		Entity Receiver {
			databaseTable="TB_RECEIVERS"
			hint="idSequence=RECEIVERS"
			not auditable
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			
			"Semantic identifier"
       		String username not nullable;
       		"Acknowledge"
       		boolean acknowledge;

			"Notice"
			- @Notice notice not nullable cascade="none" databaseColumn="RECEIVER_FK" <-> receivers;
			
			Repository ReceiverRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
			}
		}
		
		Entity Role {
			databaseTable="TB_ROLES"
			hint="idSequence=ROLES"
			not auditable
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			
			"Semantic identifier"
       		String name not nullable;

			"Notice"
			- @Notice notice not nullable cascade="none" databaseColumn="ROLE_FK" <-> roles;
			
			Repository RoleRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
			}
		}
		
		Entity App {
			databaseTable="TB_APPS"
			hint="idSequence=APPS"
			not auditable
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			
			"Semantic identifier"
       		String name not nullable;

			"Notice"
			- @Notice notice not nullable cascade="none" databaseColumn="APP_FK" <-> apps;
			
			Repository AppRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
			}
		}
		
		Entity StatisticalOperation {
			databaseTable="TB_STATISTICAL_OPERATIONS"
			hint="idSequence=STATISTICAL_OPERATIONS"
			not auditable
			
			"Added explicitly to avoid that Sculptor generate UUID"
			Long id key;
			
			"Semantic identifier"
       		String name not nullable;

			"Notice"
			- @Notice notice not nullable cascade="none" databaseColumn="STATISTICAL_OPERATION_FK" <-> statisticalOperations;
			
			Repository StatisticalOperationRepository {
				save;
				delete;
				findAll;
				findById;
				findByCondition;
				findByCondition(PagingParameter pagingParameter);
				findByQuery(String query, Map<String, Object> parameters, int maxResult);
			}
		}
	}
}